@{
    if (Session["Student"] == null)
    {
        Response.Redirect("/Login/Index");
    }
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@using DJTUStudentSystem.MVCWEB.Models
@using FluentBootstrap;
@using FluentBootstrap.Mvc;
@model  List<TeachClassViewModel>
@using DJTUStudentSystem.MVCWEB.Models
@using DJTUStudentSystem.Config


@{  Setting.isReadFromDB = true;
    var StudentModel = Session["Student"] as StudentViewModel;
    DJTUStudentSystem.BLL.Student_BLL S_BLL = new DJTUStudentSystem.BLL.Student_BLL();
    StudentModel = StudentModel.ConvertDataBaseModelToViewModel((S_BLL.GetEntityFromDAL_WithEntityID(StudentModel.StudentID)));
    Session["Student"] = StudentModel;
    Setting.isReadFromDB = false;
    var HowManyHaveStudentChoose = StudentModel.StuReportViewModelList.Where(d => d.CSort == "2" && d.Minor == "主修" && Convert.ToInt32(d.CourseResult) > 60).ToList().Count;
    var HowManyNowHaveStudentChoose= StudentModel.NowStuReportViewModelList.Where(d => d.CSort == "2" && d.Minor == "主修") .ToList().Count;
    var GradeCanChoose= Setting.GradeCanChooseCourse().Find(d => d.GradeName == StudentModel.GradeName);
}
@{ 
    if (GradeCanChoose == null)
    {

        @Html.Bootstrap().Alert(AlertState.Danger, StudentModel.StudentName, "同学您好，您的年级<B>" + StudentModel.GradeName + "</B>未开放选课!如有疑问请联系管理员！").SetDismissible(true);
    }
    else if (!GradeCanChoose.isChooseCouse)
    {
        @Html.Bootstrap().Alert(AlertState.Danger, StudentModel.StudentName, "同学您好，您的年级<B>" + StudentModel.GradeName + "</B>未开放选课!如有疑问请联系管理员！").SetDismissible(true);
    }
    else if (HowManyHaveStudentChoose >= 3)

    {
        @Html.Bootstrap().Alert(AlertState.Danger, StudentModel.StudentName, "同学您好，您已经修够了3门公选课，无需再选择了!如有疑问请联系管理员！").SetDismissible(true);
    }
    else

    {

        if (HowManyNowHaveStudentChoose >= GradeCanChoose.HowManyCanChoose)
        {
            @Html.Bootstrap().Alert(AlertState.Danger, StudentModel.StudentName, "同学您好，您本学期已经选择了" + HowManyNowHaveStudentChoose + "门公选课,你所在年级" + StudentModel.GradeName + "级,只允许选择" + GradeCanChoose.HowManyCanChoose.ToString() + "门公选课!").SetDismissible(true);
        }
        else {
            @Html.Bootstrap().Alert(AlertState.Success, StudentModel.StudentName, "同学您好，您本学期已经选择了" + HowManyNowHaveStudentChoose + "门公选课,你所在年级" + StudentModel.GradeName + "级,允许选择" + GradeCanChoose.HowManyCanChoose.ToString() + "门公选课!").SetDismissible(true);
        }
    <div class="modal fade" id="myModal" tabindex="-1" role="dialog"
     aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close"
                        data-dismiss="modal" aria-hidden="true">
                    &times;
                </button>
                <h4 class="modal-title" id="myModalLabel">
                    消息
                </h4>
            </div>
            <div class="modal-body">
               <label id="message"></label>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default"
                        data-dismiss="modal">
                    关闭
                </button>
            </div>
        </div><!-- /.modal-content -->
    </div><!-- /.modal -->
</div>

using (var table = Html.Bootstrap().Table().SetStyle(TableStyle.Bordered | TableStyle.Hover).SetAlignment(TextAlignment.Center).AddCss("text-center").Begin())
{
    int i = 0;
    <thead class="text-center">
        <tr >
            <th>序号</th>
            <th>课程名称</th>
            <th class=" hidden-480">任课教师</th>
            <th class=" hidden-480">开放状态</th>
            <th class=" hidden-480">开放人数</th>
            <th class=" hidden-480">已选人数</th>
            <th>余量</th>
            <th>课程表</th>
            <th>操作</th>
        </tr>
    </thead>


            foreach (var item in Model)
            {
                var rowg = table.TableRow();
                if (((int)item.OpenNum > (int)item.HaveNum) && (item.SelectState == "开放") && (StudentModel.NowStuReportViewModelList.Find(d => d.TeachClassID == item.TCID) == null))
                {
                    rowg.SetState(TableState.Success);

                }
                else if (StudentModel.NowStuReportViewModelList.Find(d => d.TeachClassID == item.TCID) != null)

                {
                    rowg.SetState(TableState.Warning);
                }
                else
                {
                    rowg.SetState(TableState.Danger);
                }

                using (var row = rowg.Begin())
                {

                    if (StudentModel.NowStuReportViewModelList.Find(d => d.TeachClassID == item.TCID) != null)
                    {
                        @row.TableData("<B>已选</b>&nbsp;").AddCss("vert-align");
                    }
                    else
                    {
                        @row.TableData(i = i + 1).AddCss("vert-align");
                    }

                    @row.TableData(item.CourseName).AddCss("vert-align"); ;
                    @row.TableData(item.TeacherName).AddCss("text-center hidden-480 vert-align");
                    @row.TableData(item.SelectState).AddCss("text-center hidden-480 vert-align");
                    @row.TableData(item.OpenNum).AddCss("text-center hidden-480 vert-align");
                    @row.TableData(item.HaveNum).AddCss("text-center hidden-480 vert-align");
                    @row.TableData(((int)item.OpenNum) - ((int)item.HaveNum)).AddCss("vert-align");
                    @row.TableData(item.KCB).AddCss("vert-align");
                    if (StudentModel.NowStuReportViewModelList.Find(d => d.TeachClassID == item.TCID) != null && item.SelectState!="锁定")
                    {


                        @row.TableData("<button type='button' onclick='DeleteCourse(" + StudentModel.NowStuReportViewModelList.Find(d => d.TeachClassID == item.TCID).SRID + ")' class='btn btn-danger' >退 选</button>").AddCss("vert-align");

                    }

                    else

                    if ((int)item.OpenNum > (int)item.HaveNum && item.SelectState == "开放" && StudentModel.NowStuReportViewModelList.Find(d => d.TeachClassID == item.TCID) == null && HowManyNowHaveStudentChoose < GradeCanChoose.HowManyCanChoose)
                    {


                        @row.TableData("<button type='button' onclick='ChooseCourse(" + @item.TCID + ")' class='btn btn-success vert-align' >选此课</button>").AddCss("vert-align");





                    }
                    else
                    {
                        if (item.SelectState != "开放")
                        {
                            @row.TableData("锁定").SetState(TextState.Danger).AddCss("vert-align");
                        }
                        else if (HowManyNowHaveStudentChoose >= GradeCanChoose.HowManyCanChoose && (int)item.OpenNum > (int)item.HaveNum)
                        {
                            @row.TableData("选课门数已满").SetState(TextState.Danger).AddCss("vert-align");
                        }
                        else
                        {
                            @row.TableData("余量不足").SetState(TextState.Danger).AddCss("vert-align");
                        }


                    }
                }
            }
        }

    }
}