//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//     Support: http://www.cnblogs.com/huxj
//     Website: http://ITdos.com/Dos/ORM/Index.html
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Data;
using System.Data.Common;
using Dos.ORM;
using Dos.ORM.Common;

namespace DJTUStudentSystem.DataBaseModel
{

    /// <summary>
    /// 实体类Special 。(属性说明自动提取数据库字段的描述信息)
    /// </summary>
    [Serializable]
    public partial class Special : Entity
    {
        public Special() : base("Special") { }

        #region Model
        private int _SPID;
        private int _DeptID;
        private string _SPCode;
        private string _SPNo;
        private string _SPName;
        private string _ShortName;
        private int? _SPYear;
        private string _Degree;
        private string _Lev;
        private string _Memo;
        private string _Minor;
        private string _Descript;
        private string _State;
        private int? _Limit;
        private string _ZYDM;
        private string _Used;
        private string _IfJoin;
        /// <summary>
        /// 
        /// </summary>
        public int SPID
        {
            get { return _SPID; }
            set
            {
                this.OnPropertyValueChange(_.SPID, _SPID, value);
                this._SPID = value;
            }
        }
        /// <summary>
        /// 
        /// </summary>
        public int DeptID
        {
            get { return _DeptID; }
            set
            {
                this.OnPropertyValueChange(_.DeptID, _DeptID, value);
                this._DeptID = value;
            }
        }
        /// <summary>
        /// 
        /// </summary>
        public string SPCode
        {
            get { return _SPCode; }
            set
            {
                this.OnPropertyValueChange(_.SPCode, _SPCode, value);
                this._SPCode = value;
            }
        }
        /// <summary>
        /// 
        /// </summary>
        public string SPNo
        {
            get { return _SPNo; }
            set
            {
                this.OnPropertyValueChange(_.SPNo, _SPNo, value);
                this._SPNo = value;
            }
        }
        /// <summary>
        /// 
        /// </summary>
        public string SPName
        {
            get { return _SPName; }
            set
            {
                this.OnPropertyValueChange(_.SPName, _SPName, value);
                this._SPName = value;
            }
        }
        /// <summary>
        /// 
        /// </summary>
        public string ShortName
        {
            get { return _ShortName; }
            set
            {
                this.OnPropertyValueChange(_.ShortName, _ShortName, value);
                this._ShortName = value;
            }
        }
        /// <summary>
        /// 
        /// </summary>
        public int? SPYear
        {
            get { return _SPYear; }
            set
            {
                this.OnPropertyValueChange(_.SPYear, _SPYear, value);
                this._SPYear = value;
            }
        }
        /// <summary>
        /// 
        /// </summary>
        public string Degree
        {
            get { return _Degree; }
            set
            {
                this.OnPropertyValueChange(_.Degree, _Degree, value);
                this._Degree = value;
            }
        }
        /// <summary>
        /// 
        /// </summary>
        public string Lev
        {
            get { return _Lev; }
            set
            {
                this.OnPropertyValueChange(_.Lev, _Lev, value);
                this._Lev = value;
            }
        }
        /// <summary>
        /// 
        /// </summary>
        public string Memo
        {
            get { return _Memo; }
            set
            {
                this.OnPropertyValueChange(_.Memo, _Memo, value);
                this._Memo = value;
            }
        }
        /// <summary>
        /// 
        /// </summary>
        public string Minor
        {
            get { return _Minor; }
            set
            {
                this.OnPropertyValueChange(_.Minor, _Minor, value);
                this._Minor = value;
            }
        }
        /// <summary>
        /// 
        /// </summary>
        public string Descript
        {
            get { return _Descript; }
            set
            {
                this.OnPropertyValueChange(_.Descript, _Descript, value);
                this._Descript = value;
            }
        }
        /// <summary>
        /// 
        /// </summary>
        public string State
        {
            get { return _State; }
            set
            {
                this.OnPropertyValueChange(_.State, _State, value);
                this._State = value;
            }
        }
        /// <summary>
        /// 
        /// </summary>
        public int? Limit
        {
            get { return _Limit; }
            set
            {
                this.OnPropertyValueChange(_.Limit, _Limit, value);
                this._Limit = value;
            }
        }
        /// <summary>
        /// 
        /// </summary>
        public string ZYDM
        {
            get { return _ZYDM; }
            set
            {
                this.OnPropertyValueChange(_.ZYDM, _ZYDM, value);
                this._ZYDM = value;
            }
        }
        /// <summary>
        /// 
        /// </summary>
        public string Used
        {
            get { return _Used; }
            set
            {
                this.OnPropertyValueChange(_.Used, _Used, value);
                this._Used = value;
            }
        }
        /// <summary>
        /// 
        /// </summary>
        public string IfJoin
        {
            get { return _IfJoin; }
            set
            {
                this.OnPropertyValueChange(_.IfJoin, _IfJoin, value);
                this._IfJoin = value;
            }
        }
        #endregion

        #region Method
        /// <summary>
        /// 获取实体中的标识列
        /// </summary>
        public override Field GetIdentityField()
        {
            return _.SPID;
        }
        /// <summary>
        /// 获取实体中的主键列
        /// </summary>
        public override Field[] GetPrimaryKeyFields()
        {
            return new Field[] {
                _.SPID};
        }
        /// <summary>
        /// 获取列信息
        /// </summary>
        public override Field[] GetFields()
        {
            return new Field[] {
                _.SPID,
                _.DeptID,
                _.SPCode,
                _.SPNo,
                _.SPName,
                _.ShortName,
                _.SPYear,
                _.Degree,
                _.Lev,
                _.Memo,
                _.Minor,
                _.Descript,
                _.State,
                _.Limit,
                _.ZYDM,
                _.Used,
                _.IfJoin};
        }
        /// <summary>
        /// 获取值信息
        /// </summary>
        public override object[] GetValues()
        {
            return new object[] {
                this._SPID,
                this._DeptID,
                this._SPCode,
                this._SPNo,
                this._SPName,
                this._ShortName,
                this._SPYear,
                this._Degree,
                this._Lev,
                this._Memo,
                this._Minor,
                this._Descript,
                this._State,
                this._Limit,
                this._ZYDM,
                this._Used,
                this._IfJoin};
        }
        /// <summary>
        /// 给当前实体赋值
        /// </summary>
        public override void SetPropertyValues(IDataReader reader)
        {
            this._SPID = DataUtils.ConvertValue<int>(reader["SPID"]);
            this._DeptID = DataUtils.ConvertValue<int>(reader["DeptID"]);
            this._SPCode = DataUtils.ConvertValue<string>(reader["SPCode"]);
            this._SPNo = DataUtils.ConvertValue<string>(reader["SPNo"]);
            this._SPName = DataUtils.ConvertValue<string>(reader["SPName"]);
            this._ShortName = DataUtils.ConvertValue<string>(reader["ShortName"]);
            this._SPYear = DataUtils.ConvertValue<int?>(reader["SPYear"]);
            this._Degree = DataUtils.ConvertValue<string>(reader["Degree"]);
            this._Lev = DataUtils.ConvertValue<string>(reader["Lev"]);
            this._Memo = DataUtils.ConvertValue<string>(reader["Memo"]);
            this._Minor = DataUtils.ConvertValue<string>(reader["Minor"]);
            this._Descript = DataUtils.ConvertValue<string>(reader["Descript"]);
            this._State = DataUtils.ConvertValue<string>(reader["State"]);
            this._Limit = DataUtils.ConvertValue<int?>(reader["Limit"]);
            this._ZYDM = DataUtils.ConvertValue<string>(reader["ZYDM"]);
            this._Used = DataUtils.ConvertValue<string>(reader["Used"]);
            this._IfJoin = DataUtils.ConvertValue<string>(reader["ifJoin"]);
        }
        /// <summary>
        /// 给当前实体赋值
        /// </summary>
        public override void SetPropertyValues(DataRow row)
        {
            this._SPID = DataUtils.ConvertValue<int>(row["SPID"]);
            this._DeptID = DataUtils.ConvertValue<int>(row["DeptID"]);
            this._SPCode = DataUtils.ConvertValue<string>(row["SPCode"]);
            this._SPNo = DataUtils.ConvertValue<string>(row["SPNo"]);
            this._SPName = DataUtils.ConvertValue<string>(row["SPName"]);
            this._ShortName = DataUtils.ConvertValue<string>(row["ShortName"]);
            this._SPYear = DataUtils.ConvertValue<int?>(row["SPYear"]);
            this._Degree = DataUtils.ConvertValue<string>(row["Degree"]);
            this._Lev = DataUtils.ConvertValue<string>(row["Lev"]);
            this._Memo = DataUtils.ConvertValue<string>(row["Memo"]);
            this._Minor = DataUtils.ConvertValue<string>(row["Minor"]);
            this._Descript = DataUtils.ConvertValue<string>(row["Descript"]);
            this._State = DataUtils.ConvertValue<string>(row["State"]);
            this._Limit = DataUtils.ConvertValue<int?>(row["Limit"]);
            this._ZYDM = DataUtils.ConvertValue<string>(row["ZYDM"]);
            this._Used = DataUtils.ConvertValue<string>(row["Used"]);
            this._IfJoin = DataUtils.ConvertValue<string>(row["ifJoin"]);
        }
        #endregion

        #region _Field
        /// <summary>
        /// 字段信息
        /// </summary>
        public class _
        {
            /// <summary>
            /// * 
            /// </summary>
            public readonly static Field All = new Field("*", "Special");
            /// <summary>
            /// 
            /// </summary>
            public readonly static Field SPID = new Field("SPID", "Special", "SPID");
            /// <summary>
            /// 
            /// </summary>
            public readonly static Field DeptID = new Field("DeptID", "Special", "DeptID");
            /// <summary>
            /// 
            /// </summary>
            public readonly static Field SPCode = new Field("SPCode", "Special", "SPCode");
            /// <summary>
            /// 
            /// </summary>
            public readonly static Field SPNo = new Field("SPNo", "Special", "SPNo");
            /// <summary>
            /// 
            /// </summary>
            public readonly static Field SPName = new Field("SPName", "Special", "SPName");
            /// <summary>
            /// 
            /// </summary>
            public readonly static Field ShortName = new Field("ShortName", "Special", "ShortName");
            /// <summary>
            /// 
            /// </summary>
            public readonly static Field SPYear = new Field("SPYear", "Special", "SPYear");
            /// <summary>
            /// 
            /// </summary>
            public readonly static Field Degree = new Field("Degree", "Special", "Degree");
            /// <summary>
            /// 
            /// </summary>
            public readonly static Field Lev = new Field("Lev", "Special", "Lev");
            /// <summary>
            /// 
            /// </summary>
            public readonly static Field Memo = new Field("Memo", "Special", "Memo");
            /// <summary>
            /// 
            /// </summary>
            public readonly static Field Minor = new Field("Minor", "Special", "Minor");
            /// <summary>
            /// 
            /// </summary>
            public readonly static Field Descript = new Field("Descript", "Special", "Descript");
            /// <summary>
            /// 
            /// </summary>
            public readonly static Field State = new Field("State", "Special", "State");
            /// <summary>
            /// 
            /// </summary>
            public readonly static Field Limit = new Field("Limit", "Special", "Limit");
            /// <summary>
            /// 
            /// </summary>
            public readonly static Field ZYDM = new Field("ZYDM", "Special", "ZYDM");
            /// <summary>
            /// 
            /// </summary>
            public readonly static Field Used = new Field("Used", "Special", "Used");
            /// <summary>
            /// 
            /// </summary>
            public readonly static Field IfJoin = new Field("ifJoin", "Special", "ifJoin");
        }
        #endregion


    }
}

